<?php
/*
* Generated By Orbisius Child Theme Creator - your favorite plugin for Child Theme creation :)
* https://wordpress.org/plugins/orbisius-child-theme-creator/
*
* Unlike style.css, the functions.php of a child theme does not override its counterpart from the parent.
* Instead, it is loaded in addition to the parent’s functions.php. (Specifically, it is loaded right before the parent theme's functions.php).
* Source: http://codex.wordpress.org/Child_Themes#Using_functions.php
*
* Be sure not to define functions, that already exist in the parent theme!
* A common pattern is to prefix function names with the (child) theme name.
* Also if the parent theme supports pluggable functions you can use function_exists( 'put_the_function_name_here' ) checks.
*/

/**
 * Loads parent and child themes' style.css
 */
function orbisius_ct_electrosouz_child_theme_enqueue_styles() {
    $parent_style = 'orbisius_ct_electrosouz_parent_style';
    $parent_base_dir = 'twentyfifteen';

    wp_enqueue_style( $parent_style . '_child_style',
        get_stylesheet_directory_uri() . '/style.css',
        array( $parent_style ),
        time()
    );

	wp_enqueue_style( 'fancybox-css', get_stylesheet_directory_uri() . '/fancybox/dist/jquery.fancybox.css', false, '', false );

}
add_action( 'wp_enqueue_scripts', 'orbisius_ct_electrosouz_child_theme_enqueue_styles' );


function theme_add_bootstrap() {
	wp_enqueue_style( 'bootstrap-css', get_stylesheet_directory_uri() . '/bootstrap/css/bootstrap.min.css' );
	wp_enqueue_style( 'bxslider-css', get_stylesheet_directory_uri() . '/bxslider/jquery.bxslider.min.css' );
	wp_deregister_script('jquery');
	wp_enqueue_script('jquery', 'https://ajax.googleapis.com/ajax/libs/jquery/3.1.1/jquery.min.js', array(), '3.1.1', true );
	wp_enqueue_script( 'bootstrap-js', get_stylesheet_directory_uri() . '/bootstrap/js/bootstrap.min.js', array('jquery'), '3.0.0', true );
	wp_enqueue_script('bxslider', get_stylesheet_directory_uri() . '/bxslider/jquery.bxslider.min.js', array('jquery'), '4.2.12', true );
	wp_enqueue_script('electro-js', get_stylesheet_directory_uri() . '/scripts.js', array('jquery'), time(), true );
	wp_enqueue_script( 'fancybox_js', get_stylesheet_directory_uri() . '/fancybox/dist/jquery.fancybox.js',  array( 'jquery' ) );

}
add_action( 'wp_enqueue_scripts', 'theme_add_bootstrap' );


function electro_load_admin_script( $hook ) {
	if ( 'post.php' === $hook || 'post-new.php' === $hook ) {

		wp_enqueue_style( 'admin-ui-css', 'https://ajax.googleapis.com/ajax/libs/jqueryui/1.12.1/themes/smoothness/jquery-ui.css', false, '', false );

		wp_enqueue_style( 'timepicker-css', get_stylesheet_directory_uri() . '/timepicker/jquery-ui-timepicker-addon.css', false, '', false );

		wp_enqueue_script( 'admin_js', get_stylesheet_directory_uri() . '/admin.js',  array( 'jquery', 'jquery-ui-datepicker' ) );

		wp_enqueue_script( 'timepicker_js', get_stylesheet_directory_uri() . '/timepicker/jquery-ui-timepicker-addon.js',  array( 'jquery', 'jquery-ui-datepicker' ) );
	}
}
add_action( 'admin_enqueue_scripts', 'electro_load_admin_script' );


/* Add menu locations */
function register_my_menus() {
	register_nav_menus(
		array(
			'footer-menu-1' => __( 'Footer Menu 1' ),
			'footer-menu-2' => __( 'Footer Menu 2' )
		)
	);
}
add_action( 'init', 'register_my_menus' );


add_action( 'init', 'add_bio_posts' );
function add_bio_posts() {
	$labels = array(
		'name'               => _x( 'Наши люди', 'post type general name', 'wordpress' ),
		'singular_name'      => _x( 'История', 'post type singular name', 'wordpress' ),
		'menu_name'          => _x( 'Наши люди', 'admin menu', 'wordpress' ),
		'name_admin_bar'     => _x( 'Историю', 'add new on admin bar', 'wordpress' ),
		'add_new'            => _x( 'Добавить новую', 'bio', 'wordpress' ),
		'add_new_item'       => __( 'Добавить новую историю', 'wordpress' ),
		'new_item'           => __( 'Новая история', 'wordpress' ),
		'edit_item'          => __( 'Редактировать', 'wordpress' ),
		'view_item'          => __( 'Просмотреть', 'wordpress' ),
		'all_items'          => __( 'Все истории', 'wordpress' )
	);

	$args = array(
		'labels'             => $labels,
		'description'        => __( 'Description.', 'wordpress' ),
		'public'             => true,
		'publicly_queryable' => true,
		'show_ui'            => true,
		'show_in_menu'       => true,
		'query_var'          => true,
		'rewrite'            => array( 'slug' => 'people' ),
		'capability_type'    => 'post',
		'has_archive'        => true,
		'hierarchical'       => false,
		'menu_position'      => null,
		'supports'           => array( 'title', 'editor', 'author', 'thumbnail', 'excerpt' )
	);

	register_post_type( 'story', $args );
}


add_action( 'init', 'add_news_posts' );
function add_news_posts() {
	$labels = array(
		'name'               => _x( 'Новости', 'post type general name', 'wordpress' ),
		'singular_name'      => _x( 'Новость', 'post type singular name', 'wordpress' ),
		'menu_name'          => _x( 'Все Новости', 'admin menu', 'wordpress' ),
		'name_admin_bar'     => _x( 'Новость', 'add new on admin bar', 'wordpress' ),
		'add_new'            => _x( 'Добавить новую', 'bio', 'wordpress' ),
		'add_new_item'       => __( 'Добавить Новость', 'wordpress' ),
		'new_item'           => __( 'Новая Новость', 'wordpress' ),
		'edit_item'          => __( 'Редактировать', 'wordpress' ),
		'view_item'          => __( 'Просмотреть', 'wordpress' ),
		'all_items'          => __( 'Все Новости', 'wordpress' )
	);

	$args = array(
		'labels'             => $labels,
		'description'        => __( 'Description.', 'wordpress' ),
		'public'             => true,
		'publicly_queryable' => true,
		'show_ui'            => true,
		'show_in_menu'       => true,
		'query_var'          => true,
		'rewrite'            => array( 'slug' => 'news' ),
		'capability_type'    => 'post',
		'has_archive'        => true,
		'hierarchical'       => false,
		'menu_position'      => null,
		'supports'           => array( 'title', 'editor', 'author', 'thumbnail', 'excerpt' )
	);

	register_post_type( 'news', $args );
}


add_action( 'init', 'add_events_posts' );
function add_events_posts() {
	$labels = array(
		'name'               => _x( 'Календарь событий', 'post type general name', 'wordpress' ),
		'singular_name'      => _x( 'Событие', 'post type singular name', 'wordpress' ),
		'menu_name'          => _x( 'Все События', 'admin menu', 'wordpress' ),
		'name_admin_bar'     => _x( 'Событие', 'add new on admin bar', 'wordpress' ),
		'add_new'            => _x( 'Добавить Событие', 'bio', 'wordpress' ),
		'add_new_item'       => __( 'Добавить Событие', 'wordpress' ),
		'new_item'           => __( 'Новое Событие', 'wordpress' ),
		'edit_item'          => __( 'Редактировать', 'wordpress' ),
		'view_item'          => __( 'Просмотреть', 'wordpress' ),
		'all_items'          => __( 'Все События', 'wordpress' )
	);

	$args = array(
		'labels'             => $labels,
		'description'        => __( 'Description.', 'wordpress' ),
		'public'             => true,
		'publicly_queryable' => true,
		'show_ui'            => true,
		'show_in_menu'       => true,
		'query_var'          => true,
		'rewrite'            => array( 'slug' => 'events_calendar' ),
		'capability_type'    => 'post',
		'has_archive'        => true,
		'hierarchical'       => false,
		'menu_position'      => null,
		'supports'           => array( 'title', 'editor', 'author', 'thumbnail', 'excerpt' )
	);

	register_post_type( 'events_calendar', $args );
}


add_action( 'init', 'add_announce_posts' );
function add_announce_posts() {
	$labels = array(
		'name'               => _x( 'Объявления', 'post type general name', 'wordpress' ),
		'singular_name'      => _x( 'Объявление', 'post type singular name', 'wordpress' ),
		'menu_name'          => _x( 'Все Объявления', 'admin menu', 'wordpress' ),
		'name_admin_bar'     => _x( 'Объявление', 'add new on admin bar', 'wordpress' ),
		'add_new'            => _x( 'Добавить Объявление', 'bio', 'wordpress' ),
		'add_new_item'       => __( 'Добавить Объявление', 'wordpress' ),
		'new_item'           => __( 'Новое Объявление', 'wordpress' ),
		'edit_item'          => __( 'Редактировать', 'wordpress' ),
		'view_item'          => __( 'Просмотреть', 'wordpress' ),
		'all_items'          => __( 'Все Объявления', 'wordpress' )
	);

	$args = array(
		'labels'             => $labels,
		'description'        => __( 'Description.', 'wordpress' ),
		'public'             => true,
		'publicly_queryable' => true,
		'show_ui'            => true,
		'show_in_menu'       => true,
		'query_var'          => true,
		'rewrite'            => array( 'slug' => 'announce' ),
		'capability_type'    => 'post',
		'has_archive'        => true,
		'hierarchical'       => false,
		'menu_position'      => null,
		'supports'           => array( 'title', 'editor', 'author', 'thumbnail', 'excerpt' )
	);

	register_post_type( 'announces', $args );
}


add_action( 'init', 'add_digest_posts' );
function add_digest_posts() {
	$labels = array(
		'name'               => _x( 'Дайджест', 'post type general name', 'wordpress' ),
		'singular_name'      => _x( 'Обзор', 'post type singular name', 'wordpress' ),
		'menu_name'          => _x( 'Все Обзоры', 'admin menu', 'wordpress' ),
		'name_admin_bar'     => _x( 'Обзор для дайджеста', 'add new on admin bar', 'wordpress' ),
		'add_new'            => _x( 'Добавить Обзор', 'bio', 'wordpress' ),
		'add_new_item'       => __( 'Добавить Обзор', 'wordpress' ),
		'new_item'           => __( 'Новый Обзор', 'wordpress' ),
		'edit_item'          => __( 'Редактировать', 'wordpress' ),
		'view_item'          => __( 'Просмотреть', 'wordpress' ),
		'all_items'          => __( 'Все Обзоры', 'wordpress' )
	);

	$args = array(
		'labels'             => $labels,
		'description'        => __( 'Description.', 'wordpress' ),
		'public'             => true,
		'publicly_queryable' => true,
		'show_ui'            => true,
		'show_in_menu'       => true,
		'query_var'          => true,
		'rewrite'            => array( 'slug' => 'digest' ),
		'capability_type'    => 'post',
		'has_archive'        => true,
		'hierarchical'       => false,
		'menu_position'      => null,
		'supports'           => array( 'title', 'editor', 'excerpt' )
	);

	register_post_type( 'digest', $args );
}


add_action( 'init', 'add_digest_media' );
function add_digest_media() {
	$labels = array(
		'name'               => _x( 'Профсоюзные СМИ', 'post type general name', 'wordpress' ),
		'singular_name'      => _x( 'Издание', 'post type singular name', 'wordpress' ),
		'menu_name'          => _x( 'Все Издания', 'admin menu', 'wordpress' ),
		'name_admin_bar'     => _x( 'Издание для дайджеста', 'add new on admin bar', 'wordpress' ),
		'add_new'            => _x( 'Добавить Издание', 'bio', 'wordpress' ),
		'add_new_item'       => __( 'Добавить Издание', 'wordpress' ),
		'new_item'           => __( 'Новое Издание', 'wordpress' ),
		'edit_item'          => __( 'Редактировать', 'wordpress' ),
		'view_item'          => __( 'Просмотреть', 'wordpress' ),
		'all_items'          => __( 'Все Издания', 'wordpress' )
	);

	$args = array(
		'labels'             => $labels,
		'exclude_from_search' => true,
		'description'        => __( 'Description.', 'wordpress' ),
		'public'             => true,
		'publicly_queryable' => true,
		'show_ui'            => true,
		'show_in_menu'       => true,
		'query_var'          => true,
		'rewrite'            => array( 'slug' => 'profmedia' ),
		'capability_type'    => 'post',
		'has_archive'        => true,
		'hierarchical'       => false,
		'menu_position'      => null,
		'supports'           => array( 'title', 'thumbnail' )
	);

	register_post_type( 'profmedia', $args );
}


add_action( 'init', 'add_gallery_posts' );
function add_gallery_posts() {
	$labels = array(
		'name'               => _x( 'Галерея', 'post type general name', 'wordpress' ),
		'singular_name'      => _x( 'Галерея', 'post type singular name', 'wordpress' ),
		'menu_name'          => _x( 'Все Галереи', 'admin menu', 'wordpress' ),
		'name_admin_bar'     => _x( 'Галерею', 'add new on admin bar', 'wordpress' ),
		'add_new'            => _x( 'Добавить Галерею', 'bio', 'wordpress' ),
		'add_new_item'       => __( 'Добавить Галерею', 'wordpress' ),
		'new_item'           => __( 'Новая Галерея', 'wordpress' ),
		'edit_item'          => __( 'Редактировать', 'wordpress' ),
		'view_item'          => __( 'Просмотреть', 'wordpress' ),
		'all_items'          => __( 'Все Галереи', 'wordpress' )
	);

	$args = array(
		'labels'             => $labels,
		'description'        => __( 'Description.', 'wordpress' ),
		'public'             => true,
		'publicly_queryable' => true,
		'show_ui'            => true,
		'show_in_menu'       => true,
		'query_var'          => true,
		'rewrite'            => array( 'slug' => 'galleries' ),
		'capability_type'    => 'post',
		'has_archive'        => true,
		'hierarchical'       => false,
		'menu_position'      => null,
		'supports'           => array( 'title', 'editor', 'author', 'thumbnail' )
	);

	register_post_type( 'galleries', $args );
}


add_action( 'init', 'add_prof_map_items' );
function add_prof_map_items() {
	$labels = array(
		'name'               => _x( 'Карта профсоюзов', 'post type general name', 'wordpress' ),
		'singular_name'      => _x( 'Профсоюз для карты', 'post type singular name', 'wordpress' ),
		'menu_name'          => _x( 'Все профсоюзы', 'admin menu', 'wordpress' ),
		'name_admin_bar'     => _x( 'Профсоюз', 'add new on admin bar', 'wordpress' ),
		'add_new'            => _x( 'Добавить Профсоюз', 'bio', 'wordpress' ),
		'add_new_item'       => __( 'Добавить Профсоюз', 'wordpress' ),
		'new_item'           => __( 'Новый Профсоюз', 'wordpress' ),
		'edit_item'          => __( 'Редактировать', 'wordpress' ),
		'view_item'          => __( 'Просмотреть', 'wordpress' ),
		'all_items'          => __( 'Все Профсоюзы', 'wordpress' )
	);

	$args = array(
		'labels'             => $labels,
		'exclude_from_search' => true,
		'description'        => __( 'Description.', 'wordpress' ),
		'public'             => true,
		'publicly_queryable' => true,
		'show_ui'            => true,
		'show_in_menu'       => true,
		'query_var'          => true,
		'rewrite'            => array( 'slug' => 'map_profs' ),
		'capability_type'    => 'post',
		'has_archive'        => true,
		'hierarchical'       => false,
		'menu_position'      => null,
		'supports'           => array( 'title', 'thumbnail' ),
		'taxonomies'         => array( 'cities' )
	);

	register_post_type( 'map_profs', $args );
}


add_action( 'init', 'add_prof_contests' );
function add_prof_contests() {
	$labels = array(
		'name'               => _x( 'Конкурсы', 'post type general name', 'wordpress' ),
		'singular_name'      => _x( 'Конкурсная Работа', 'post type singular name', 'wordpress' ),
		'menu_name'          => _x( 'Все Конкурсы', 'admin menu', 'wordpress' ),
		'name_admin_bar'     => _x( 'Конкурс', 'add new on admin bar', 'wordpress' ),
		'add_new'            => _x( 'Добавить Работу', 'bio', 'wordpress' ),
		'add_new_item'       => __( 'Добавить Конкурсную Работу', 'wordpress' ),
		'new_item'           => __( 'Новая Работа', 'wordpress' ),
		'edit_item'          => __( 'Редактировать', 'wordpress' ),
		'view_item'          => __( 'Просмотреть', 'wordpress' ),
		'all_items'          => __( 'Все Конкурсы', 'wordpress' )
	);

	$args = array(
		'labels'             => $labels,
		'description'        => __( 'Description.', 'wordpress' ),
		'public'             => true,
		'publicly_queryable' => true,
		'show_ui'            => true,
		'show_in_menu'       => true,
		'query_var'          => true,
		'rewrite'            => array( 'slug' => 'contests' ),
		'capability_type'    => 'post',
		'has_archive'        => true,
		'hierarchical'       => false,
		'menu_position'      => null,
		'supports'           => array( 'title', 'editor', 'author', 'thumbnail', 'excerpt' ),
		'taxonomies'         => array( 'contest' )
	);

	register_post_type( 'contests', $args );
}


function my_rewrite_flush() {
	add_news_posts();
	add_bio_posts();
	add_announce_posts();
	add_digest_posts();
	add_digest_media();
	add_gallery_posts();
	add_prof_map_items();
	add_prof_contests();
	flush_rewrite_rules();
}
add_action( 'after_switch_theme', 'my_rewrite_flush' );


add_action( 'init', 'electro_maps_cities_taxonomy', 0 );
function electro_maps_cities_taxonomy() {

// Add new taxonomy, make it hierarchical like categories
//first do the translations part for GUI

	$labels = array(
		'name' => _x( 'Города', 'taxonomy general name' ),
		'singular_name' => _x( 'Город', 'taxonomy singular name' ),
		'search_items' =>  __( 'Искать город' ),
		'all_items' => __( 'Все города' ),
		'parent_item' => __( 'Корневой город' ),
		'parent_item_colon' => __( 'Корневой город:' ),
		'edit_item' => __( 'Изменить город' ),
		'update_item' => __( 'Обновить город' ),
		'add_new_item' => __( 'Добавить город' ),
		'new_item_name' => __( 'Название города' ),
		'menu_name' => __( 'Города' ),
	);

// Now register the taxonomy

	register_taxonomy('cities',array('map_profs'), array(
		'hierarchical' => true,
		'labels' => $labels,
		'show_ui' => true,
		'show_admin_column' => true,
		'query_var' => true,
		'rewrite' => array( 'slug' => 'city' ),
	));

}


add_action( 'init', 'electro_contests_taxonomy', 0 );
function electro_contests_taxonomy() {

// Add new taxonomy, make it hierarchical like categories
//first do the translations part for GUI

	$labels = array(
		'name' => _x( 'Конкурсы', 'taxonomy general name' ),
		'singular_name' => _x( 'Конкурс', 'taxonomy singular name' ),
		'search_items' =>  __( 'Искать Конкурс' ),
		'all_items' => __( 'Все Конкурсы' ),
		'parent_item' => __( 'Корневой конкурс' ),
		'parent_item_colon' => __( 'Корневой конкурс:' ),
		'edit_item' => __( 'Изменить конкурс' ),
		'update_item' => __( 'Обновить конкурс' ),
		'add_new_item' => __( 'Добавить конкурс' ),
		'new_item_name' => __( 'Название конкурса' ),
		'menu_name' => __( 'Конкурсы' ),
	);

// Now register the taxonomy

	register_taxonomy('contest',array('contests'), array(
		'hierarchical' => true,
		'labels' => $labels,
		'show_ui' => true,
		'show_admin_column' => true,
		'query_var' => true,
		'rewrite' => array( 'slug' => 'contest' ),
	));

}


function electro_set_posts_per_page_for_story( $query ) {
	if ( !is_admin() && $query->is_main_query() && is_post_type_archive( 'story' ) ) {
		$query->set( 'posts_per_page', '8' );
	}
}
add_action( 'pre_get_posts', 'electro_set_posts_per_page_for_story' );


function electro_get_previous_posts_link( $label = null ) {
	global $paged;

	if ( null === $label )
		$label = __( 'Previous' );

	if ( !is_single() && $paged > 1 ) {
		/**
		 * Filters the anchor tag attributes for the previous posts page link.
		 *
		 * @since 2.7.0
		 *
		 * @param string $attributes Attributes for the anchor tag.
		 */
		$attr = apply_filters( 'previous_posts_link_attributes', '' );
		return '<a href="' . previous_posts( false ) . "\" $attr>". preg_replace( '/&([^#])(?![a-z]{1,8};)/i', '&#038;$1', $label ) .'</a>';
	}
}


function electro_get_next_posts_link( $label = null, $max_page = 0 ) {
	global $paged, $wp_query;

	if ( !$max_page )
		$max_page = $wp_query->max_num_pages;

	if ( !$paged )
		$paged = 1;

	$nextpage = intval($paged) + 1;

	if ( null === $label )
		$label = __( 'Next' );

	if ( !is_single() && ( $nextpage <= $max_page ) ) {
		/**
		 * Filters the anchor tag attributes for the next posts page link.
		 *
		 * @since 2.7.0
		 *
		 * @param string $attributes Attributes for the anchor tag.
		 */
		$attr = apply_filters( 'next_posts_link_attributes', '' );

		return '<a href="' . next_posts( $max_page, false ) . "\" $attr>" . preg_replace('/&([^#])(?![a-z]{1,8};)/i', '&#038;$1', $label) . '</a>';
	}
}


function electro_numeric_posts_nav() {

	if( is_singular() )
		return;

	global $wp_query;

	/** Stop execution if there's only 1 page */
	if( $wp_query->max_num_pages <= 1 )
		return;

	$paged = get_query_var( 'paged' ) ? absint( get_query_var( 'paged' ) ) : 1;
	$max   = intval( $wp_query->max_num_pages );

	/** Add current page to the array */
	if ( $paged >= 1 )
		$links[] = $paged;

	/** Add the pages around the current page to the array */
	if ( $paged >= 3 ) {
		$links[] = $paged - 1;
		$links[] = $paged - 2;
	}

	if ( ( $paged + 2 ) <= $max ) {
		$links[] = $paged + 2;
		$links[] = $paged + 1;
	}

	echo '<figure class="electro-navigation"><ul>' . "\n";

	/** Previous Post Link */
	if ( get_previous_posts_link() )
		printf( '<li>%s</li>' . "\n", electro_get_previous_posts_link() );

	/** Link to first page, plus ellipses if necessary */
	if ( ! in_array( 1, $links ) ) {
		$class = 1 == $paged ? ' class="active"' : '';

		printf( '<li%s><a href="%s">%s</a></li>' . "\n", $class, esc_url( get_pagenum_link( 1 ) ), '1' );

		if ( ! in_array( 2, $links ) )
			echo '<li>…</li>';
	}

	/** Link to current page, plus 2 pages in either direction if necessary */
	sort( $links );
	foreach ( (array) $links as $link ) {
		$class = $paged == $link ? ' class="active"' : '';
		printf( '<li%s><a href="%s">%s</a></li>' . "\n", $class, esc_url( get_pagenum_link( $link ) ), $link );
	}

	/** Link to last page, plus ellipses if necessary */
	if ( ! in_array( $max, $links ) ) {
		if ( ! in_array( $max - 1, $links ) )
			echo '<li>…</li>' . "\n";

		$class = $paged == $max ? ' class="active"' : '';
		printf( '<li%s><a href="%s">%s</a></li>' . "\n", $class, esc_url( get_pagenum_link( $max ) ), $max );
	}

	/** Next Post Link */
	if ( get_next_posts_link() )
		printf( '<li>%s</li>' . "\n", electro_get_next_posts_link() );

	echo '</ul></figure>' . "\n";

}

/**
 * Register our sidebars and widgetized areas.
 *
 */
function electro_widgets_init() {

	register_sidebar( array(
		'name'          => 'Область виджетов Категорий',
		'id'            => 'archive_right_1',
		'before_widget' => '<div>',
		'after_widget'  => '</div>',
		'before_title'  => '',
		'after_title'   => '',
	) );

}
add_action( 'widgets_init', 'electro_widgets_init' );

/**
 * Хлебные крошки для WordPress (breadcrumbs)
 *
 * @param  string [$sep  = '']      Разделитель. По умолчанию ' » '
 * @param  array  [$l10n = array()] Для локализации. См. переменную $default_l10n.
 * @param  array  [$args = array()] Опции. См. переменную $def_args
 * @return string Выводит на экран HTML код
 *
 * version 3.3.1
 */
function kama_breadcrumbs( $sep = ' » ', $l10n = array(), $args = array() ){
	$kb = new Kama_Breadcrumbs;
	echo $kb->get_crumbs( $sep, $l10n, $args );
}


class Kama_Breadcrumbs {

	public $arg;

	// Локализация
	static $l10n = array(
		'home'       => 'Главная',
		'paged'      => 'Страница %d',
		'_404'       => 'Ошибка 404',
		'search'     => 'Результаты поиска по запросу - <b>%s</b>',
		'author'     => 'Архив автора: <b>%s</b>',
		'year'       => 'Архив за <b>%d</b> год',
		'month'      => 'Архив за: <b>%s</b>',
		'day'        => '',
		'attachment' => 'Медиа: %s',
		'tag'        => 'Записи по метке: <b>%s</b>',
		'tax_tag'    => '%1$s из "%2$s" по тегу: <b>%3$s</b>',
		// tax_tag выведет: 'тип_записи из "название_таксы" по тегу: имя_термина'.
		// Если нужны отдельные холдеры, например только имя термина, пишем так: 'записи по тегу: %3$s'
	);

	// Параметры по умолчанию
	static $args = array(
		'on_front_page'   => true,  // выводить крошки на главной странице
		'show_post_title' => false,  // показывать ли название записи в конце (последний элемент). Для записей, страниц, вложений
		'show_term_title' => true,  // показывать ли название элемента таксономии в конце (последний элемент). Для меток, рубрик и других такс
		'title_patt'      => '<span class="kb_title">%s</span>', // шаблон для последнего заголовка. Если включено: show_post_title или show_term_title
		'last_sep'        => true,  // показывать последний разделитель, когда заголовок в конце не отображается
		'markup'          => 'schema.org', // 'markup' - микроразметка. Может быть: 'rdf.data-vocabulary.org', 'schema.org', '' - без микроразметки
		// или можно указать свой массив разметки:
		// array( 'wrappatt'=>'<div class="kama_breadcrumbs">%s</div>', 'linkpatt'=>'<a href="%s">%s</a>', 'sep_after'=>'', )
		'priority_tax'    => array('category'), // приоритетные таксономии, нужно когда запись в нескольких таксах
		'priority_terms'  => array(), // 'priority_terms' - приоритетные элементы таксономий, когда запись находится в нескольких элементах одной таксы одновременно.
		// Например: array( 'category'=>array(45,'term_name'), 'tax_name'=>array(1,2,'name') )
		// 'category' - такса для которой указываются приор. элементы: 45 - ID термина и 'term_name' - ярлык.
		// порядок 45 и 'term_name' имеет значение: чем раньше тем важнее. Все указанные термины важнее неуказанных...
		'nofollow' => false, // добавлять rel=nofollow к ссылкам?

		// служебные
		'sep'             => '',
		'linkpatt'        => '',
		'pg_end'          => '',
	);

	function get_crumbs( $sep, $l10n, $args ){
		global $post, $wp_query, $wp_post_types;

		self::$args['sep'] = $sep;

		// Фильтрует дефолты и сливает
		$loc = (object) array_merge( apply_filters('kama_breadcrumbs_default_loc', self::$l10n ), $l10n );
		$arg = (object) array_merge( apply_filters('kama_breadcrumbs_default_args', self::$args ), $args );

		$arg->sep = '<span class="kb_sep">'. $arg->sep .'</span>'; // дополним

		// упростим
		$sep = & $arg->sep;
		$this->arg = & $arg;

		// микроразметка ---
		if(1){
			$mark = & $arg->markup;

			// Разметка по умолчанию
			if( ! $mark ) $mark = array(
				'wrappatt'  => '<div class="kama_breadcrumbs">%s</div>',
				'linkpatt'  => '<a href="%s">%s</a>',
				'sep_after' => '',
			);
			// rdf
			elseif( $mark === 'rdf.data-vocabulary.org' ) $mark = array(
				'wrappatt'   => '<div class="kama_breadcrumbs" prefix="v: http://rdf.data-vocabulary.org/#">%s</div>',
				'linkpatt'   => '<span typeof="v:Breadcrumb"><a href="%s" rel="v:url" property="v:title">%s</a>',
				'sep_after'  => '</span>', // закрываем span после разделителя!
			);
			// schema.org
			elseif( $mark === 'schema.org' ) $mark = array(
				'wrappatt'   => '<div class="kama_breadcrumbs" itemscope itemtype="http://schema.org/BreadcrumbList">%s</div>',
				'linkpatt'   => '<span itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem"><a href="%s" itemprop="item"><span itemprop="name">%s</span></a></span>',
				'sep_after'  => '',
			);

			elseif( ! is_array($mark) )
				die( __CLASS__ .': "markup" parameter must be array...');

			$wrappatt  = $mark['wrappatt'];
			$arg->linkpatt  = $arg->nofollow ? str_replace('<a ','<a rel="nofollow"', $mark['linkpatt']) : $mark['linkpatt'];
			$arg->sep      .= $mark['sep_after']."\n";
		}

		$linkpatt = $arg->linkpatt; // упростим

		$q_obj = get_queried_object();

		// может это архив пустой таксы?
		$ptype = null;
		if( empty($post) ){
			if( isset($q_obj->taxonomy) )
				$ptype = & $wp_post_types[ get_taxonomy($q_obj->taxonomy)->object_type[0] ];
		}
		else $ptype = & $wp_post_types[ $post->post_type ];

		// paged
		$arg->pg_end = '';
		if( ($paged_num = get_query_var('paged')) || ($paged_num = get_query_var('page')) )
			$arg->pg_end = $sep . sprintf( $loc->paged, (int) $paged_num );

		$pg_end = $arg->pg_end; // упростим

		// ну, с богом...
		$out = '';

		if( is_front_page() ){
			return $arg->on_front_page ? sprintf( $wrappatt, ( $paged_num ? sprintf($linkpatt, get_home_url(), $loc->home) . $pg_end : $loc->home ) ) : '';
		}
		// страница записей, когда для главной установлена отдельная страница.
		elseif( is_home() ) {
			$out = $paged_num ? ( sprintf( $linkpatt, get_permalink($q_obj), esc_html($q_obj->post_title) ) . $pg_end ) : esc_html($q_obj->post_title);
		}
		elseif( is_404() ){
			$out = $loc->_404;
		}
		elseif( is_search() ){
			$out = sprintf( $loc->search, esc_html( $GLOBALS['s'] ) );
		}
		elseif( is_author() ){
			$tit = sprintf( $loc->author, esc_html($q_obj->display_name) );
			$out = ( $paged_num ? sprintf( $linkpatt, get_author_posts_url( $q_obj->ID, $q_obj->user_nicename ) . $pg_end, $tit ) : $tit );
		}
		elseif( is_year() || is_month() || is_day() ){
			$y_url  = get_year_link( $year = get_the_time('Y') );

			if( is_year() ){
				$tit = sprintf( $loc->year, $year );
				$out = ( $paged_num ? sprintf($linkpatt, $y_url, $tit) . $pg_end : $tit );
			}
			// month day
			else {
				$y_link = sprintf( $linkpatt, $y_url, $year);
				$m_url  = get_month_link( $year, get_the_time('m') );

				if( is_month() ){
					$tit = sprintf( $loc->month, get_the_time('F') );
					$out = $y_link . $sep . ( $paged_num ? sprintf( $linkpatt, $m_url, $tit ) . $pg_end : $tit );
				}
				elseif( is_day() ){
					$m_link = sprintf( $linkpatt, $m_url, get_the_time('F'));
					$out = $y_link . $sep . $m_link . $sep . get_the_time('l');
				}
			}
		}
		// Древовидные записи
		elseif( is_singular() && $ptype->hierarchical ){
			$out = $this->_add_title( $this->_page_crumbs($post), $post );
		}
		// Таксы, плоские записи и вложения
		else {
			$term = $q_obj; // таксономии

			// определяем термин для записей (включая вложения attachments)
			if( is_singular() ){
				// изменим $post, чтобы определить термин родителя вложения
				if( is_attachment() && $post->post_parent ){
					$save_post = $post; // сохраним
					$post = get_post($post->post_parent);
				}

				// учитывает если вложения прикрепляются к таксам древовидным - все бывает :)
				$taxonomies = get_object_taxonomies( $post->post_type );
				// оставим только древовидные и публичные, мало ли...
				$taxonomies = array_intersect( $taxonomies, get_taxonomies( array('hierarchical' => true, 'public' => true) ) );

				if( $taxonomies ){
					// сортируем по приоритету
					if( ! empty($arg->priority_tax) ){
						usort( $taxonomies, function($a,$b)use($arg){
							$a_index = array_search($a, $arg->priority_tax);
							if( $a_index === false ) $a_index = 9999999;

							$b_index = array_search($b, $arg->priority_tax);
							if( $b_index === false ) $b_index = 9999999;

							return ( $b_index === $a_index ) ? 0 : ( $b_index < $a_index ? 1 : -1 ); // меньше индекс - выше
						} );
					}

					// пробуем получить термины, в порядке приоритета такс
					foreach( $taxonomies as $taxname ){
						if( $terms = get_the_terms( $post->ID, $taxname ) ){
							// проверим приоритетные термины для таксы
							$prior_terms = & $arg->priority_terms[ $taxname ];
							if( $prior_terms && count($terms) > 2 ){
								foreach( (array) $prior_terms as $term_id ){
									$filter_field = is_numeric($term_id) ? 'term_id' : 'slug';
									$_terms = wp_list_filter( $terms, array($filter_field=>$term_id) );

									if( $_terms ){
										$term = array_shift( $_terms );
										break;
									}
								}
							}
							else
								$term = array_shift( $terms );

							break;
						}
					}
				}

				if( isset($save_post) ) $post = $save_post; // вернем обратно (для вложений)
			}

			// вывод

			// все виды записей с терминами или термины
			if( $term && isset($term->term_id) ){
				$term = apply_filters('kama_breadcrumbs_term', $term );

				// attachment
				if( is_attachment() ){
					if( ! $post->post_parent )
						$out = sprintf( $loc->attachment, esc_html($post->post_title) );
					else {
						if( ! $out = apply_filters('attachment_tax_crumbs', '', $term, $this ) ){
							$_crumbs    = $this->_tax_crumbs( $term, 'self' );
							$parent_tit = sprintf( $linkpatt, get_permalink($post->post_parent), get_the_title($post->post_parent) );
							$_out = implode( $sep, array($_crumbs, $parent_tit) );
							$out = $this->_add_title( $_out, $post );
						}
					}
				}
				// single
				elseif( is_single() ){
					if( ! $out = apply_filters('post_tax_crumbs', '', $term, $this ) ){
						$_crumbs = $this->_tax_crumbs( $term, 'self' );
						$out = $this->_add_title( $_crumbs, $post );
					}
				}
				// не древовидная такса (метки)
				elseif( ! is_taxonomy_hierarchical($term->taxonomy) ){
					// метка
					if( is_tag() )
						$out = $this->_add_title('', $term, sprintf( $loc->tag, esc_html($term->name) ) );
					// такса
					elseif( is_tax() ){
						$post_label = $ptype->labels->name;
						$tax_label = $GLOBALS['wp_taxonomies'][ $term->taxonomy ]->labels->name;
						$out = $this->_add_title('', $term, sprintf( $loc->tax_tag, $post_label, $tax_label, esc_html($term->name) ) );
					}
				}
				// древовидная такса (рибрики)
				else {
					if( ! $out = apply_filters('term_tax_crumbs', '', $term, $this ) ){
						$_crumbs = $this->_tax_crumbs( $term, 'parent' );
						$out = $this->_add_title( $_crumbs, $term, esc_html($term->name) );
					}
				}
			}
			// влоежния от записи без терминов
			elseif( is_attachment() ){
				$parent = get_post($post->post_parent);
				$parent_link = sprintf( $linkpatt, get_permalink($parent), esc_html($parent->post_title) );
				$_out = $parent_link;

				// вложение от записи древовидного типа записи
				if( is_post_type_hierarchical($parent->post_type) ){
					$parent_crumbs = $this->_page_crumbs($parent);
					$_out = implode( $sep, array( $parent_crumbs, $parent_link ) );
				}

				$out = $this->_add_title( $_out, $post );
			}
			// записи без терминов
			elseif( is_singular() ){
				$out = $this->_add_title( '', $post );
			}
		}

		// замена ссылки на архивную страницу для типа записи
		$home_after = apply_filters('kama_breadcrumbs_home_after', '', $linkpatt, $sep, $ptype );

		if( '' === $home_after ){
			// Ссылка на архивную страницу типа записи для: отдельных страниц этого типа; архивов этого типа; таксономий связанных с этим типом.
			if( $ptype && $ptype->has_archive && ! in_array( $ptype->name, array('post','page','attachment') )
			    && ( is_post_type_archive() || is_singular() || (is_tax() && in_array($term->taxonomy, $ptype->taxonomies)) )
			){
				$pt_title = $ptype->labels->name;

				// первая страница архива типа записи
				if( is_post_type_archive() && ! $paged_num )
					$home_after = $pt_title;
				// singular, paged post_type_archive, tax
				else{
					$home_after = sprintf( $linkpatt, get_post_type_archive_link($ptype->name), $pt_title );

					$home_after .= ( ($paged_num && ! is_tax()) ? $pg_end : $sep ); // пагинация
				}
			}
		}

		$before_out = sprintf( $linkpatt, home_url(), $loc->home ) . ( $home_after ? $sep.$home_after : ($out ? $sep : '') );

		$out = apply_filters('kama_breadcrumbs_pre_out', $out, $sep, $loc, $arg );

		$out = sprintf( $wrappatt, $before_out . $out );

		return apply_filters('kama_breadcrumbs', $out, $sep, $loc, $arg );
	}

	function _page_crumbs( $post ){
		$parent = $post->post_parent;

		$crumbs = array();
		while( $parent ){
			$page = get_post( $parent );
			$crumbs[] = sprintf( $this->arg->linkpatt, get_permalink($page), esc_html($page->post_title) );
			$parent = $page->post_parent;
		}

		return implode( $this->arg->sep, array_reverse($crumbs) );
	}

	function _tax_crumbs( $term, $start_from = 'self' ){
		$termlinks = array();
		$term_id = ($start_from === 'parent') ? $term->parent : $term->term_id;
		while( $term_id ){
			$term       = get_term( $term_id, $term->taxonomy );
			$termlinks[] = sprintf( $this->arg->linkpatt, get_term_link($term), esc_html($term->name) );
			$term_id    = $term->parent;
		}

		if( $termlinks )
			return implode( $this->arg->sep, array_reverse($termlinks) ) /*. $this->arg->sep*/;
		return '';
	}

	// добалвяет заголовок к переданному тексту, с учетом всех опций. Добавляет разделитель в начало, если надо.
	function _add_title( $add_to, $obj, $term_title = '' ){
		$arg = & $this->arg; // упростим...
		$title = $term_title ? $term_title : esc_html($obj->post_title); // $term_title чиститься отдельно, теги моугт быть...
		$show_title = $term_title ? $arg->show_term_title : $arg->show_post_title;

		// пагинация
		if( $arg->pg_end ){
			$link = $term_title ? get_term_link($obj) : get_permalink($obj);
			$add_to .= ($add_to ? $arg->sep : '') . sprintf( $arg->linkpatt, $link, $title ) . $arg->pg_end;
		}
		// дополняем - ставим sep
		elseif( $add_to ){
			if( $show_title )
				$add_to .= $arg->sep . sprintf( $arg->title_patt, $title );
			elseif( $arg->last_sep )
				$add_to .= $arg->sep;
		}
		// sep будет потом...
		elseif( $show_title )
			$add_to = sprintf( $arg->title_patt, $title );

		return $add_to;
	}

}


/* Дата и место проведения мероприятия meta boxes*/
add_action( 'add_meta_boxes', 'electro_event_date_place' );
function electro_event_date_place() {
	add_meta_box( 'ba_meta_1', 'Дата и место проведения мероприятия', 'electro_event_date_place_meta', 'events_calendar', 'normal', 'high' );
}


function electro_event_date_place_meta( $post ) {
	$event_time = get_post_meta( $post->ID, '_event_time', true);
	$event_position = get_post_meta( $post->ID, '_event_position', true);
	?>
	<p>
		<label>Дата и время мероприятия:</label>
	</p>
	<p>
		<input id="electro_event_datepicker" type="text" name="event_time" value="<?php if (($event_time != '')) { echo date( 'd.m.Y G:i',$event_time ); } else {} ?>" />
	</p>

	<p>
		<label>Место проведения мероприятия:</label>
	</p>
	<p>
		<input type="text" name="event_position" value="<?php echo esc_attr( $event_position ); ?>" />
	</p>

	<?php
}


add_action( 'save_post', 'electro_events_save_meta' );
function electro_events_save_meta( $post_ID ) {
	global $post;
	if( $post->post_type == "events_calendar" ) {
		if (isset( $_POST ) ) {
			$ev_date = strtotime(strip_tags( $_POST['event_time'] ));
			update_post_meta( $post_ID, '_event_time', $ev_date );
			update_post_meta( $post_ID, '_event_position', strip_tags( $_POST['event_position'] ) );
		}
	}
}


/* meta boxes для карты профсоюзов*/
add_action( 'add_meta_boxes', 'electro_map_item_fields' );
function electro_map_item_fields() {
	add_meta_box( 'electro_map_meta_1', 'Контактные данные Профсоюза', 'electro_map_item_fields_meta', 'map_profs', 'normal', 'high' );
}


function electro_map_item_fields_meta( $post ) {
	$prof_chief = get_post_meta( $post->ID, '_prof_chief', true);
	$prof_email = get_post_meta( $post->ID, '_prof_email', true);
	$prof_phone = get_post_meta( $post->ID, '_prof_phone', true);
	$prof_url = get_post_meta( $post->ID, '_prof_url', true);
	?>
    <p>
        <label>ФИО руководителя:</label>
    </p>
    <p>
        <input type="text" name="prof_chief" value="<?php echo esc_attr( $prof_chief ); ?>" />
    </p>

    <p>
        <label>Email:</label>
    </p>
    <p>
        <input type="text" name="prof_email" value="<?php echo esc_attr( $prof_email ); ?>" />
    </p>

    <p>
        <label>Телефон:</label>
    </p>
    <p>
        <input type="text" name="prof_phone" value="<?php echo esc_attr( $prof_phone ); ?>" />
    </p>

    <p>
        <label>Сайт:</label>
    </p>
    <p>
        <input type="text" name="prof_url" value="<?php echo esc_attr( $prof_url ); ?>" />
    </p>
	<?php
}


add_action( 'save_post', 'electro_map_item_save_meta' );
function electro_map_item_save_meta( $post_ID ) {
	global $post;
	if( $post->post_type == "map_profs" ) {
		if (isset( $_POST ) ) {
			update_post_meta( $post_ID, '_prof_chief', strip_tags( $_POST['prof_chief'] ) );
			update_post_meta( $post_ID, '_prof_email', strip_tags( $_POST['prof_email'] ) );
			update_post_meta( $post_ID, '_prof_phone', strip_tags( $_POST['prof_phone'] ) );
			update_post_meta( $post_ID, '_prof_url', strip_tags( $_POST['prof_url'] ) );
		}
	}
}


/* Дата и место проведения мероприятия meta boxes*/
add_action( 'add_meta_boxes', 'electro_profmedia_url' );
function electro_profmedia_url() {
	add_meta_box( 'ba_meta_2', 'URL издания', 'electro_profmedia_url_meta', 'profmedia', 'normal', 'high' );
}


function electro_profmedia_url_meta( $post ) {
	$media_url = get_post_meta( $post->ID, '_media_url', true);
	?>
    <p>
        <label>URL издания:</label>
    </p>
    <p>
        <input type="text" name="media_url" value="<?php echo esc_attr( $media_url ); ?>" />
    </p>

	<?php
}


add_action( 'save_post', 'electro_profmedia_url_save_meta' );
function electro_profmedia_url_save_meta( $post_ID ) {
	global $post;
	if( $post->post_type == "profmedia" ) {
		if (isset( $_POST ) ) {
			update_post_meta( $post_ID, '_media_url', strip_tags( $_POST['media_url'] ) );
		}
	}
}


add_filter('post_gallery','electro_customFormatGallery',10,2);
function electro_customFormatGallery($string,$attr){

	$output = "<div id=\"gallery-container\" class=\"gallery-container\">";
	$posts = get_posts(array('include' => $attr['ids'],'post_type' => 'attachment'));

	foreach($posts as $imagePost){
		$output .= "<a data-fancybox=\"gallery\" class=\"gallery-image-wrap\" href=\"".wp_get_attachment_image_url($imagePost->ID, 'large', true)."\"><div class=\"gallery-image\" style=\"background-image: url(".wp_get_attachment_image_url($imagePost->ID, 'medium', true).");\"></div></a>";

	}

	$output .= "</div>";

	return $output;
}


function electro_attachment_count() {
	global $post;
	//Get all attachments
	$attachments = get_posts( array(
		'post_type' => 'attachment',
		'posts_per_page' => -1
	) );

	$att_count = 0;
	if ( $attachments ) {
		foreach ( $attachments as $attachment ) {
			// Check for the post type based on individual attachment's parent
			if ( 'gallery' == get_post_type($attachment->post_parent) ) {
				$att_count = $att_count + 1;
			}
		}
		echo $att_count;
	}
}


function electro_parent_slug() {
    global $post;
	$post_data = get_post($post->post_parent);
	$parent_slug = $post_data->post_name;
	return $parent_slug;
}


$ajaxurl = admin_url( 'admin-ajax.php');


wp_localize_script( 'twentyfifteen-script', 'screenReaderText', array(
	'ajaxurl'  => $ajaxurl,
) );


add_action('wp_ajax_nopriv_electro_more_post_ajax', 'electro_more_post_ajax');
add_action('wp_ajax_electro_more_post_ajax', 'electro_more_post_ajax');

if (!function_exists('electro_more_post_ajax')) {
	function electro_more_post_ajax(){

		$ppp     = -1;
		$cat     = (isset($_POST['cat'])) ? $_POST['cat'] : 0;
		$offset  = 0;

		global $post;

		$args = array(
			'post_type'      => 'map_profs',
			'posts_per_page' => $ppp,
			'offset'         => $offset,
			'cities'         => $cat
		);

		$out = '';

        $myposts = get_posts( $args );
        foreach ( $myposts as $post ) : setup_postdata( $post );

	        $prof_chief = get_post_meta( $post->ID, '_prof_chief', true);
		    $prof_email = get_post_meta( $post->ID, '_prof_email', true);
	        $prof_phone = get_post_meta( $post->ID, '_prof_phone', true);
	        $prof_url = get_post_meta( $post->ID, '_prof_url', true);

	        $out .= '<div class="prof-item">';
	        $out .= '<div class="prof-title">'.get_the_title().'</div>';
	        $out .= (!empty($prof_chief)) ? '<div class="prof-chief">Председатель: <span>'.$prof_chief.'</span></div>' : '';
	        $out .= (!empty($prof_email)) ? '<div class="prof-email"><span>E-mail:</span> <a href="mailto:'.$prof_email.'">'.$prof_email.'</a></div>' : '';
	        $out .= (!empty($prof_phone)) ? '<div class="prof-phone"><span>Телефон:</span>'.$prof_phone.'</div>' : '';
	        $out .= (!empty($prof_url)) ? '<div class="prof-url"><a target="_blank" href="'.$prof_url.'" class="btn gold-button btn-block">Подробнее</a></div>' : '';
	        $out .= '</div>';

        endforeach;
        wp_reset_postdata();

		wp_die($out);
	}
}


function electro_count_videos($content) {
  $counter = 0;
  $counter += substr_count($content, 'youtube');
	$counter += substr_count($content, 'video_');
	$counter += substr_count($content, 'vimeo');

	return $counter;
}


function electro_date_meta_query( $query ) {

	if( $query->is_post_type_archive( 'events_calendar' ) ){
		$meta_query = array(
			array(
				'key' => '_event_time',
				'value' => time(),
				'compare' => '>=',
				'type' => 'NUMERIC'
			)
		);
		$query->set( 'meta_query', $meta_query );
		$query->set( 'meta_key', '_event_time' );
		$query->set( 'orderby', 'meta_value_num' );
		$query->set( 'order', 'ASC' );
	}
}
add_action( 'pre_get_posts', 'electro_date_meta_query' );